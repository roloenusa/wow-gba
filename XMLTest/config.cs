//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections.Generic;

// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
[System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
public partial class configurations {
    
    private configurationsWeights[] weightsField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("weights", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public configurationsWeights[] Weights {
        get {
            return this.weightsField;
        }
        set {
            this.weightsField = value;
        }
    }

    #region Get and Save

    /***
     * GET CONFIGS.
     * This should prolly be outsoursed somewhere better. but for now...
     ***/
    public static configurations getConfigurations() {
        System.IO.StreamReader str = new System.IO.StreamReader("config.xml");
        System.Xml.Serialization.XmlSerializer xSerializer = new System.Xml.Serialization.XmlSerializer(typeof(configurations));
        configurations res = (configurations)xSerializer.Deserialize(str);
        str.Close();

        return res;
    }

    /***
     * SAVE CONFIGS.
     * This should prolly be outsoursed somewhere better. but for now...
     ***/
    public static void saveConfigurations(configurations res) {
        //TEST FOR WRITER
        System.IO.StreamWriter strOut = new System.IO.StreamWriter("config.xml");
        System.Xml.Serialization.XmlSerializer xSerializerOut = new System.Xml.Serialization.XmlSerializer(typeof(configurations));
        xSerializerOut.Serialize(strOut, res);

        strOut.Close();
    }

    #endregion
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public partial class configurationsWeights {

    private configurationsWeightsType[] typeField;
    private List<configurationsWeightsType> typeList;

    private bool dirty = false;

    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("type", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public configurationsWeightsType[] type {
        get {
            if (dirty)
            {
                this.typeField = typeList.ToArray();
                dirty = false;
            }
            return this.typeField;
        }
        set {
            this.typeField = value;
            this.typeList = new List<configurationsWeightsType>(value);
        }
    }

    [System.Xml.Serialization.XmlIgnore]
    public List<configurationsWeightsType> TypeList
    {
        get {
            return this.typeList;
        }
        set {
            this.typeList = value;
        }
    }

    public void AddType(string temp)
    {
        configurationsWeightsType cwtSubtype = new configurationsWeightsType();
        cwtSubtype.name = temp;
        cwtSubtype.AddSubType("");
        this.typeList.Add(cwtSubtype);

        dirty = true;
        return;
    }

    /// <summary>
    /// Scans a list of subtypes. Searches by the name of the subtype in the list.
    /// </summary>
    /// <param name="subtype">Name of the subtype we're searching for</param>
    /// <returns>the index of the subtype or -1 if the subtype does not exist. (this should not happen)</returns>
    public int getTypeIndex(string name)
    {
        int trow = 0;
        for (trow = 0; trow < typeList.Count; trow++)
        {
            if (typeList[trow].name == name)
                return trow;
        }

        return -1;
    }

}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public partial class configurationsWeightsType {
    
    private configurationsWeightsTypeSubtype[] subtypeField;
    private List<configurationsWeightsTypeSubtype> subtypeList;

    private bool dirty = false;
    
    private string nameField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("subtype", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public configurationsWeightsTypeSubtype[] subtype {
        get {
            if (dirty)
            {
                this.subtypeField = this.subtypeList.ToArray();
                dirty = false;
            }

            return this.subtypeField;
        }
        set {

                this.subtypeField = value;
                this.subtypeList = new List<configurationsWeightsTypeSubtype>(value);

                Console.WriteLine("Assigning value of array to list.");
        }
    }
    [System.Xml.Serialization.XmlIgnore]
    public List<configurationsWeightsTypeSubtype> subTypeList
    {
        get
        {
            return this.subtypeList;
        }
        set
        {
            this.subtypeList = new List<configurationsWeightsTypeSubtype>(value);
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    } 

    public void AddSubType(string temp)
    {
        configurationsWeightsTypeSubtype cwtSubtype = new configurationsWeightsTypeSubtype();
        cwtSubtype.name = temp;
        cwtSubtype.ItemList = new List<configurationsWeightsTypeSubtypeItem>();
        cwtSubtype.AddItem(new configurationsWeightsTypeSubtypeItem().NewItem(0, "default", 0));

        if (this.subtypeList == null) this.subtypeList = new List<configurationsWeightsTypeSubtype>();
        this.subtypeList.Add(cwtSubtype);

        dirty = true;
        return;
    }

    /// <summary>
    /// Scans a list of subtypes. Searches by the name of the subtype in the list.
    /// </summary>
    /// <param name="subtype">Name of the subtype we're searching for</param>
    /// <returns>the index of the subtype or -1 if the subtype does not exist. (this should not happen)</returns>
    public int GetSubtypeIndex(string subtype)
    {
        int strow = 0;
        for(strow = 0; strow < subtypeList.Count; strow++)
        {
            if(subtypeList[strow].name == subtype)
                return strow;
        }

        return -1;
    }


}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public partial class configurationsWeightsTypeSubtype {
    
    private configurationsWeightsTypeSubtypeItem[] itemField;
    private List<configurationsWeightsTypeSubtypeItem> itemList;
    
    private string nameField;

    private bool dirty = false;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public configurationsWeightsTypeSubtypeItem[] item {
        get {
            if (dirty)
            {
                this.itemField = this.itemList.ToArray();
                dirty = false;
            }
            return this.itemField;
        }
        set {
            this.itemField = value;
            this.itemList = new List<configurationsWeightsTypeSubtypeItem>(value);
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }

    [System.Xml.Serialization.XmlIgnore]
    public List<configurationsWeightsTypeSubtypeItem> ItemList
    {
        get { return this.itemList; }

        set { this.itemList = new List<configurationsWeightsTypeSubtypeItem>(value); }
    }

    public void AddItem(configurationsWeightsTypeSubtypeItem item)
    {
        this.itemList.Add(item);
        dirty = true;
    }

    public configurationsWeightsTypeSubtypeItem GetItemById(int id)
    {
        int irow = 0;
        for (irow = 0; irow < this.itemList.Count; irow++)
        {
            if (itemList[irow].id == id)
                return itemList[irow];
        }

        return itemList[0];
    }

}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public partial class configurationsWeightsTypeSubtypeItem {
    
    private int idField;
    
    private string nameField;
    
    private int weightField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int id {
        get {
            return this.idField;
        }
        set {
            this.idField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int weight {
        get {
            return this.weightField;
        }
        set {
            this.weightField = value;
        }
    }

    public configurationsWeightsTypeSubtypeItem NewItem(int id, string name, int weight) {

        this.id = id;
        this.name = name;
        this.weight = weight;

        Console.WriteLine("Adding Item: id="+id+" name="+name+" weight="+weight);

        return this;
    }
    
}
